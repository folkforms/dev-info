{
  "data": {
    "start": {
      "_description": "Run 'hsenv qa' to log in to the QA env."
    },
    "frontend": {
      "_aliases": [ "fe", "front-end", "app" ],
      "build": {
        "_description": "Build the frontend using 'bend yarn'",
        "_executable": "bend yarn"
      },
      "run": {
        "_description": "Run the frontend using 'bend reactor serve'",
        "_executable": "bend reactor serve"
      },
      "check": {
        "_description": "Lint and prettify the front-end code with:\n    - bend yarn hs-eslint\n    - bend yarn hs-prettier write --loglevel=silent",
        "_executable": "bend yarn hs-eslint && bend yarn hs-prettier write --loglevel=silent && git status -sb"
      },
      "routes": {
        "_description": "Frontend routes example:\n\n- Go to https://tools.hubteamqa.com/cms-approvals/approvals?filterStatus=ANY_STATUS\n- Go to https://api.hubspotqa.com/review-notes/x8EnXyl-vW6J8gd5UQBEHLT_bcp66Mvf\n- Change 'api' to 'local': https://local.hubspotqa.com/review-notes/x8EnXyl-vW6J8gd5UQBEHLT_bcp66Mvf\n- cat hubspot.deploy/<name>.yaml | grep -U10 -i staticRoutes"
      },
      "test": {
        "_description": "open https://local.hsappstatic.net/${name}/static/test/test.html\n\n'name' should come from hubspot.deploy/<name>.yaml",
        "_executable": "open https://local.hsappstatic.net/${name}/static/test/test.html"
      },
      "deploy": {
        "_description": "Open Orion: https://private.hubteam.com/orion/deploy?command=deploy&deployConfig=${name}&environment=qa",
        "_executable": "open https://private.hubteam.com/orion/deploy?command=deploy&deployConfig=${name}&environment=qa"
      }
    },
    "backend": {
      "_aliases": [ "be", "back-end" ],
      "workflow": {
        "_description": "Note: Run 'mvn config:generate' after each step and check the appropriate file has been generated. If it does not generate, run 'mvn clean verify' and look for errors.\n\n1. Stop running service\n2. Add FooIF\n3. Update FooFetchResultIF to use Foo\n4. Update FooDataRefreshResponseIF to use Foo\n5. Update RefreshDataHelper to use Foo\n6. Update FooFetcher to call setFoos"
      },
      "build": {
        "_description": "Build the back-end using 'mvn clean verify' and 'mvn config:generate'.",
        "_executable": "mvn clean verify && mvn config:generate"
      },
      "service": {
        "_description": "Run the back-end service\n\nFind the ${name}Service.java file and run it. It will fail due to missing args. Edit the args and set:\n\n- VM options: -Dhubspot.zk.group=<zoo keeper group> -Dhubspot.local.env=qa\n- Program arguments: server hubspot.deploy/${name}Service.yaml\n\nzoo keeper group can be found with 'cat hubspot.deploy/*Service.yaml | grep -i zkGroup'\n\nThen run the service again."
      },
      "tests": {
        "_description": "'mvn clean verify' will run the back-end tests.\n\nYou can grep the failing test output with:\n\nfind . -regex .\\*surefire-reports.\\*${failingTestName}.\\* | xargs cat | grep -U1 \"Errors: [1-9]\"\n\nFIXME Update that grep to include failures."
      },
      "resources": {
        "_description": "How resources (URLs) interact with the database\n\nFooResource -> FooManager -> QueryGenerator -> FooSearchField -> FooSearchObject\n\nThe QueryGenerator uses the FooSearchField and FooSearchObject to get the fields and tables involved.\n\nThe FooManager will also reference the FooDao via a very complicated path. The Dao will get the IDs, and the IDs will be used with the query to get the actual data.\n\nFor reference, the path is:\n\nSearchResource -> SearchManager -> LookupsManager -> getOnboardingInfoSlave -> OnboardingInfoServiceManager.getOnboardingServiceInfoSlave -> first 'if(onboarding_service)' -> OnboardingServiceManager.getByServiceIdsSlave -> OnboardingServiceDao"
      },
      "jobs": {
        "_description": "Jobs\n\nJobs are on-demand, scheduled or event-driven jobs that will do things like populate database tables. For example, CustomerSuccessSearch keeps a copy of some of the data from CustomerServicesOnboarding's database tables. It uses a job called 'ExistingHubsRefreshJob' to update that data.\n\nTo run a job, find the FooJobRunner class in the FooJobs project. Run it. It will fail and print a list of possible jobs.\n\nEdit the run configuration:\n- VM options: -Dhubspot.local.env=qa\n- Program arguments: <job name>",
        "_executable": "open https://product.hubteam.com/docs/onboarding/backend/thinking_in_portals.html#synccontactsjobjava"
      },
      "fetcher": {
        "_description": "The fetcher is used by a job to refresh the data on a database table. For example, Service 1 owns a set of data. Service 2 uses some or all of that data (perhaps to speed up searches) and wants a copy of it. Service 2 will have a job to 'refresh' its copy of Service 1's data.\n\nFor example, in CustomerSuccessSearch repo, there is a job 'ExistingHubsRefreshJob' that looks like: ExistingHubsRefreshJob -> RefreshDataHelper -> OnboardingServiceRefreshHelper -> OnboardingServiceFetcher.\n\nThis job is used to get a copy of the data from CustomerServicesOnboarding into CustomerSuccessSearch."
      }
    },
    "github": {
      "_aliases": [ "repos" ],
      "_description": "https://git.hubteam.com/HubSpot\nhttps://git.hubteam.com/HubSpotProtected",
      "_executable": "open https://git.hubteam.com/HubSpotProtected/"
    },
    "bender": {
      "restart": {
        "_description": "Restart bender proxy with 'brew services restart bender-proxy'",
        "_executable": "brew services restart bender-proxy"
      }
    },
    "term": {
      "_aliases": [ "terminal", "zsh" ],
      "find": {
        "_description": "Find files using:\n\nfind . -name Foo\\*\nfind . -regex .\\*path.\\*file.\\*\n\nNote that wildcards must be escaped to avoid shell expansion."
      }
    },
    "misc": {
      "zoom": {
        "_description": "Zoom: https://hubspot.zoom.us/j/9533523457?pwd=S0UwYkI2b2szS2RQNWFGTFlyM2NOUT09"
      }
    },
    "errors": {
      "_aliases": [ "error" ],
      "generate": {
        "_description": "Files won't generate\n\nIt often won't generate if there are errors like checkstyle errors.\n\nTo fix, run 'mvn clean verify' and look for errors. The details are printed above the summary section."
      }
    }
  }
}

